import numpy as np
import cv2
import math

# Open Camera
capture = cv2.VideoCapture(0)

while capture.isOpened():

    # Capture frames from the camera
    ret, frame = capture.read()
    kernel = np.ones((3, 3), np.uint8)

    # Get hand data from the rectangle sub window
    cv2.rectangle(frame, (100, 100), (300, 300), (0, 255, 0), 2)

    #Rectnagle Box frame
    rbf = frame[100:300, 100:300]

    # Change color-space from BGR -> HSV
    hsv = cv2.cvtColor(rbf, cv2.COLOR_BGR2HSV)

    # define range of skin color in HSV
    lower_skin = np.array([0, 20, 70], dtype=np.uint8)
    upper_skin = np.array([20, 255, 255], dtype=np.uint8)

    # extract skin color image
    mask = cv2.inRange(hsv, lower_skin, upper_skin)

    # extrapolate the hand to fill dark spots within
    mask = cv2.dilate(mask, kernel, iterations=4)

    # blur the image
    mask = cv2.GaussianBlur(mask, (5, 5), 100)

    # Show threshold/mask frame image
    cv2.imshow("Thresholded", mask)

    # Find contours
    contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    try:
        # Find contour with maximum area
        contour = max(contours, key=lambda x: cv2.contourArea(x))

        # Create bounding rectangle around the contour
        x, y, w, h = cv2.boundingRect(contour)
        cv2.rectangle(rbf, (x, y), (x + w, y + h), (0, 0, 255), 0)

        # Find convex hull
        hull = cv2.convexHull(contour)

        # define area of hull and area of hand
        areahull = cv2.contourArea(hull)
        areacnt = cv2.contourArea(contour)

        # find the percentage of area not covered by hand in convex hull
        arearatio = ((areahull - areacnt) / areacnt) * 100

        # Draw contour
        drawing = np.zeros(rbf.shape, np.uint8)
        cv2.drawContours(drawing, [contour], -1, (0, 255, 0), 0)
        cv2.drawContours(drawing, [hull], -1, (0, 0, 255), 0)

        # Find convexity defects
        hull = cv2.convexHull(contour, returnPoints=False)
        defects = cv2.convexityDefects(contour, hull)

        # Use cosine rule to find angle of the far point from the start and end point i.e. the convex points (the finger
        # tips) for all defects
        count_defects = 0

        for i in range(defects.shape[0]):
            s, e, f, d = defects[i, 0]
            start = tuple(contour[s][0])
            end = tuple(contour[e][0])
            far = tuple(contour[f][0])
            pt = (100, 180)

            # find length of all sides of triangle
            a = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
            b = math.sqrt((far[0] - start[0]) ** 2 + (far[1] - start[1]) ** 2)
            c = math.sqrt((end[0] - far[0]) ** 2 + (end[1] - far[1]) ** 2)
            s = (a + b + c) / 2
            ar = math.sqrt(s * (s - a) * (s - b) * (s - c))

            # distance between point and convex hull
            d = (2 * ar) / a

            # apply cosine rule here
            angle = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c)) * 57

            # if angle > 90 draw a circle at the far point/ignore angles > 90 and ignore points very close to
            # convex hull(they generally come due to noise)
            if angle <= 90 and d > 30:
                count_defects += 1
                cv2.circle(rbf, far, 3, [0, 0, 255], -1)

            # draw lines arnd
            cv2.line(rbf, start, end, [0, 255, 0], 2)

        count_defects += 1
        # Print number of fingers
        if count_defects == 1:
            if areacnt < 2000:
                cv2.putText(frame, 'Put hand in the box', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)
            else:
                if arearatio < 12:
                    cv2.putText(frame, '0', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)
                elif arearatio < 17.5:
                    cv2.putText(frame, 'Best of luck', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

                else:
                    cv2.putText(frame, '1', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        elif count_defects == 2:
            cv2.putText(frame, '2', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        elif count_defects == 3:
            if arearatio < 27:
                cv2.putText(frame, '3', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)
            else:
                cv2.putText(frame, 'ok', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        elif count_defects == 4:
            cv2.putText(frame, '4', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        elif count_defects == 5:
            cv2.putText(frame, '5', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        elif count_defects == 6:
            cv2.putText(frame, 'reposition', (0, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)

        else:
            cv2.putText(frame, 'reposition', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 3)
    except:
        pass

    # Show required images
    cv2.imshow("Gesture", frame)

    # Close the camera if 'q' is pressed
    if cv2.waitKey(1) == ord('q'):
        break

capture.release()
cv2.destroyAllWindows()